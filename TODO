(HL) Extend your desugar standard library with mutation helpers.
(HL) Write a dozen example J6 programs.
(LL) Extend your data structures to J6 and the CEK3 machine to CEK4 to handle J6 programs.
(HL) Write a dozen example J7 programs.
(HL) Extend desugar so that J7 programs are elaborated into J6 programs.
(HL) Extend desugar to support letrec.
(HL & LL) Extend your data structures to represent J9 programs.
(HL) Write a dozen example J9 programs.
(LL) Extend your CEK4 machine to CEK5 to support J9 programs.
(HL & LL) Extend your data structures to represent J10 programs, and remove support for J9 programs.
(HL) Write a dozen example J10 programs.
(HL) Modify your standard library and desugar to support J9 programs as J10 programs.
(LL) Extend your CEK4 machine to CEK6.
(HL) Extend your desugar to provide control constructs.
(HL) Extend your standard library to support generators and write some example generators.
(HL) Implement message-passing concurrency in your standard library.
(HL) Write a dozen examples programs that use concurrency.
(HL) Implement locks using message-passing concurrency.
(HL) Implement futures (i.e. promises) using message-passing concurrency.
(HL) Write a dozen example J12 programs.
(HL & LL) Extend your system from J11 to J12, thereby supporting runtime type inspection.
(HL) Update your standard library to check types before performing operations.
(HL) Extend your standard library and desugar to support contracts.
(HL) Implement a basic syntax-rules macro system.
(HL) Refactor your desugar function so that many of its features are now implemented in the standard library as macros.
(*) Download teachlog and write an interesting logic program.
(HL) Write an example program that uses an obscene amount of memory without garbage collection.
(LL) Modify your virtual machine to perform stop & copy garbage collection.
(HL) Write a dozen programs that fail to type check.
(HL) Write a dozen programs that fail at runtime due to contract violations on untyped boundaries.
(HL) Write a dozen programs that contain valid typed regions.
(HL) Implement a gradual type checker and elaborator that runs after your desugar function.
Note. After this, most tasks can be done in any order.
(HL & LL) Modify your LL representation to use static variable offsets.
(HL & LL) Modify your LL representation to use flat closures, rather than the nested ones we've used so far.
(HL & LL) Create a bytecode format that enables your machine to instantly start without parsing.
(HL & LL) Add seals to your language.
(HL) Extend your macro system to support hygiene via sets-of-scopes.
(HL & LL) Implement NaN boxing.
(HL) Modify your type elaborator to optimize programs using type information.
(HL) Implement a reader for your language and give it a real syntax.
(HL) Extend your type system (and examples & violations) to support polymorphism.
(HL) Extend your type system (and examples & violations) to support structural subtyping of object types.
(HL) Extend your type system (and examples & violations) to use constraint-solving inference.
(HL) Implement a teachlog-style logic programming environment in your language using the non-determinism monad.
(HL & LL) Extend your system to support continuation marks.
(HL) Use continuation marks to make parameters.
(LL) Extend your virtual machine to support mark-and-sweep as an option.
(HL) Extend your type system to support F-bounded polymorphism.
(HL) Change your implementation of polymorphism to monomorphize.
(HL) Extend your type system (and examples & violations) to support iso-recursive types.
(HL) Implement a logic programming environment in your language using first-class continuations and continuation marks.
(HL) Use continuation marks to make exceptions work correctly with concurrency.
(HL) Use continuation marks to make space-efficient contracts.
(HL) Use continuation marks (with keys) to implement sandboxed evaluation via security-through-stack-inspection.
(HL) Implement select and asynchronous channels using message-passing concurrency.
(HL & LL) Extend your system to support IO via special channels.
(HL) Extend your macro system to support procedural macros.
(HL) Implement a match macro.
(HL) Extend your macro system to support syntax-local-value.
(LL) Extend your virtual machine to support generational garbage collection.
